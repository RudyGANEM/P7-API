# This is a basic workflow to help you get started with Actions

name: CI/CD Pipeline for FastAPI Application

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-and-deploy"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Sets up a Python environment using the specified version
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9.18'  # Ensure this matches the Python version you're using locally

    # Installs dependencies using pip
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi==0.96.1 uvicorn==0.30.1 pytest==7.4.0 joblib==1.2.0 pandas==2.1.4 colorama==0.4.6 shap==0.45.1 streamlit==1.36.0 scikit-learn==1.3.0 black==23.11.0 imbalanced-learn==0.11.0

    # Run tests to ensure that the build is not broken
    - name: Run tests
      run: |
        echo "Running Rudy GANEM's tests..."
        pytest

    # If the tests pass, build the application
    - name: Build the Application
      run: |
        echo "Building the application..."
        # You might want to perform tasks like compiling, or simply packaging the application
        # For Python, this might just mean ensuring that all dependencies are collected

    # If build and tests pass, deploy the application to a server
    - name: Deploy the Application
      run: |
        echo "Deploying the application..."
        # Example: You could use a script or a deployment tool to deploy to your server
        # Here's how you might use scp (secure copy) to deploy to a remote server
        # scp -r ./* username@server:/path/to/deployment/
        # Or use a specialized deployment tool or script

    # This step will notify you if the deployment is successful
    - name: Notify Deployment Status
      run: |
        echo "Application deployed successfully!"
